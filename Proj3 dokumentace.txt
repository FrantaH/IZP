/**
 * \file Proj3.h
 * \author My Self
 * \date 9 Sep 2012
 * \brief File containing Header file and description.
 *
 */


/** \brief Definition of object.
 *
 * Object is defined by Id, x position and y position.
*/
struct obj_t {
    int id; /**< Identificator. Identificator of object */
    float x; /**< Position on the x axis */
    float y; /**< Position on the y axis */
};

/** \brief Cluster (array) of objects.
 *
 * Cluster of structs defined by actual size, capacity and pointer to array of objects
*/
struct cluster_t {
    int size; /**< Define actual size of cluster (count of objects in cluster). */
    int capacity; /**< Define capacity of cluster (maximal count of objects in cluster) */
    struct obj_t *obj; /**< Pointer to array of objects in cluster */
};

/** \defgroup ClusterManage
 *
 * \brief Memory and cluster manage
 *
 * This module managing space in memory, allocating, adding and removeing object from
 * cluster etc.
 *
 */

 /** \defgroup ClusterAndObjectComputing
 *
 * \brief Math operations over objects and clusters
 *
 * This module calculates distances between clusters and objects.
 */

 
/** \addtogroup ClusterManage */
/*\{*/
/**
* Procedure to initialize cluster 'c'. Allocate memory for cap objects (capacity)
* Pointer NULL in array refers to capacity 0.
*
* \param *c pointer to array of cluster where should be initialized.
* \param cap define size of cluster.
* \return null.
*/
void init_cluster(struct cluster_t *c, int cap);

/** Remove all objects from cluster and initialize to empty cluster.

* \param *c Cluster that should be cleared.
* \return null.
 */
void clear_cluster(struct cluster_t *c);

/** Chunk of cluster objects. Value recommended for reallocation.
 */
extern const int CLUSTER_CHUNK;


/** \brief Function resize cluster capacity.
 *
 *  To resize cluster you have to enter cluter to resize and new capacity.
 *
 *  \param *c pointer of cluster to resize.
 *  \param new_cap new capacity of cluster.
 *  \pre Pointer *c is not null.
 *  \pre c->capacity >= 0.
 *  \pre new_cap is higher than 0.
 *  \return pointer to updated cluster.
 */
struct cluster_t *resize_cluster(struct cluster_t *c, int new_cap);

/** \brief Procedure add to cluster one object.
 *
 *  This procedure add new objet do existing cluster.
 *
 *  \param *c pointer of cluster.
 *  \param obj object that will be added to cluster *c.
 *  \pre Pointer *c is not null.
 *  \pre obj is not null.
 *  \return null.
 *  \note In case of small cluster, cluster will be resized.
 */
void append_cluster(struct cluster_t *c, struct obj_t obj);


/** \brief For each object in c2 add to c1.
 *
 * This procedure add all object from cluster c2 to cluster c1. All objects in cluster will be sorted asc by ID.
 *
 *	\param *c1 destination cluster for merge.
 *  \param *c2 source cluster for merge.
 *  \pre c1 is not null.
 *  \pre c2 is not null.
 *  \return null.
 *  \note In case of small cluster, cluster will be resized, see append_cluster.
 */
void merge_clusters(struct cluster_t *c1, struct cluster_t *c2);

/** \brief Remove object from cluster.
*
* This procedure remove object from cluster based on idx.
*
*  \param *carr cluster to edit.
*  \param narr size of cluster.
*  \param idx id of object to remove from cluster.
*  \pre idx is smaller then narr.
*  \pre zero is less then narr.
*  \return new count of object in array
*/
int remove_cluster(struct cluster_t *carr, int narr, int idx);

/** \brief Load clusters from file.
*
* This procedure load object from file and init them. Procedure also allocate space for array of clusters.
*
*  \param *filename path to file where objects are documented.
*  \param **arr pointer to array of clusters.
*  \pre arr is not null.
*  \return count of loaded clusters.
*/
int load_clusters(char *filename, struct cluster_t **arr);
/*\}*/




/** \addtogroup ClusterAndObjectComputing */
/*\{*/
/** \brief Distance between objects.
*
* This function calculate Euclidean distance between two objects.
*
*  \param *o1 first object.
*  \param *o2 second object.
*  \pre *o1 is not null.
*  \pre *o2 is not null.
*  \return distance |o1 - o2|.
*/
float obj_distance(struct obj_t *o1, struct obj_t *o2);

/** \brief Distance between clusters.
*
* This function calculate distance between two clusters.
*
*  \param *c1 first cluster.
*  \param *c2 second cluster.
*  \pre *c1 is not null and c1->size > 0.
*  \pre *c2 is not null and c2->size > 0.
*  \return distance |c1 - c2|.
*/
float cluster_distance(struct cluster_t *c1, struct cluster_t *c2);

/** \brief Find two nearest clusters.
*
* Procedure find two nearest clusters from array of clusters and save pointers to them to *c1 and *c2 parametr.
*
*  \param *carr array of clusters.
*  \param narr size of array carr.
*  \param *c1 first of two nearest clusters.
*  \param *c2 second of two nearest clusters.
*  \pre narr > 0.
*  \return null..
*/
void find_neighbours(struct cluster_t *carr, int narr, int *c1, int *c2);
/*\}*/

/** Sort objects in cluster *c asc(Id).
 * \param *c pointer to cluster to sort.
 * \return null.
*/
void sort_cluster(struct cluster_t *c);

void print_cluster(struct cluster_t *c);

void print_clusters(struct cluster_t *carr, int narr);
